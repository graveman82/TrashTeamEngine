===============================
 Платформа (компилятор, ЯП, ОС)
===============================
 + ZVD_COMPILER_GCC -- определяется автоматически, если используется компилятор GCC. Только чтение.
 + ZVD_CPP -- определяется автоматически, если используется компилятор C++. Только чтение.
 + ZVD_CPP_STANDARD -- определяется автоматически, если используется компилятор C++; содержит номер стандарта ЯП C++. Только чтение.
 
 + ZVD_OS_WIN -- определяется автоматически, если используется ОС Windows. Только чтение.
 + ZVD_OS_WIN32 -- определяется автоматически, если используется 32-х битная ОС Windows. Только чтение.
 + ZVD_OS_WIN64 -- определяется автоматически, если используется 64-х битная ОС Windows. Только чтение.
 + ZVD_OS_STRING -- определяется автоматически; содержит строку с именем операционной системы. Только чтение.
 
 + ZVD_CPU_X86 -- определяется автоматически, если используется процессор Intel x86. Только чтение.
 + ZVD_CPU_STRING -- определяется автоматически; содержит строку с именем процессора. Только чтение.
 + ZVD_LITTLE_ENDIAN -- определяется автоматически для машин с порядком байт Little endian. Только чтение.
 
=================================
 Настройка проекта перед сборкой
=================================
 + ZVD_OFF_INTTYPE_SIZE_CHECKING -- отключить проверку размеров целочисленных типов C++ во время компиляции. В большинстве случаев этот макрос не понадобится. Он нужен в том случае, если стандартные целочисленные типы 
 языка C++ не будут иметь предполагаемые размеры. при определении этого макроса будут использоваться целочисленные типы компилятора.
 
----------------------
 Language support lib
----------------------
 + ZVD_USED_CRT -- Zavod3D использует библиотеку CRT. Несовместим с ZVD_USED_CPPSTD. Задаваемый.
 + ZVD_USED_CPPSTD -- Zavod3D использует библиотеку std языка C++. Несовместим с ZVD_USED_CRT. Задаваемый.


===========================
 Общие утилиты и константы
===========================

---------
 Утилиты
---------
 + ZVD_UNUSED(x) -- для оборачивания неиспользуемой переменной.
 + ZVD_FOURCC(ch0, ch1, ch2, ch3) -- возвращает 4-х байтный код из заданных символов.
 + ZVD_OFFSET_OF(type,member) -- возвращает смещение члена POD-типа в байтах.
 
-----------
 Константы
-----------
 + kZVD_SHARED_STATIC_BUFFER_SIZE -- размер общего разделяемого буфера. По умолчанию 4096. Задаваемый.
..................................
 Для строк в стиле C (безопасные)
..................................
 + kZVD_MAX_SAFE_CSTRING_SIZE -- максимальный размер для безопасной строки. Предполагается, что строки, используемые при операциях с безопасными строками (ZvdSafeStrlen() и т.д.), имеют размеры, не превосходящие данного числа. По умолчанию равен kZVD_SHARED_STATIC_BUFFER_SIZE. Задаваемый.
 
=========
 Отладка
=========
 + ZVD_STATIC_ASSERT(expr) -- используется для обнаружения нарушений утверждений во время компиляции.
 + ZVD_DEBUG_LEVEL -- задает уровень отладки. Задается в настройках проекта. Должен принимать одно из нижеследующих значений:
 
----------------
 Уровни отладки
----------------
Уровни отладки задают глубину отладки.
 + ZVD_DEBUG_LEVEL_NONE -- отладка отключена.
 + ZVD_DEBUG_LEVEL_LOW -- низкие затраты на отладку (можно оставить в релизе).
 + ZVD_DEBUG_LEVEL_MEDIUM -- используется при разработке после того как большая часть кода будет оттестирована.
 + ZVD_DEBUG_LEVEL_HIGH -- интенсивный поиск багов.
 + ZVD_DEBUG_LEVEL_EXTRA -- для перехвата серьезных ошибок.
 + ZVD_DEBUG_LEVEL_PARANOIC -- параноидальный режим.
 
-----------
 Константы
-----------
 + kZVD_ERROR_DESC_TEXTUAL_INFO_SIZE -- размер буфера для текстового описания (комментария) к ошибке.
 По умолчанию 512. Задаваемый.
 
=============
 Test macros
=============
 + TTE_TESTDUMMY_NAME_BUFSIZE -- задает длину символьного буфера для имени вспомогательной структуры для теста (по умолчанию: 16). Задаваемый.

